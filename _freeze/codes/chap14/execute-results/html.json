{
  "hash": "7b8926d8676c44b57f2167a8766bdb42",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"14 Régularisation de la vraisemblance\"\ntoc: true\n---\n\n::: {#4b890da6 .cell execution_count=1}\n``` {.python .cell-code}\nimport pandas as pd; import numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.linear_model import LogisticRegressionCV, LogisticRegression\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.model_selection import StratifiedKFold\nfrom patsy import dmatrix\n```\n:::\n\n\n#   Regressions ridge, lasso et elastic-net\n\n::: {#d8ed910f .cell execution_count=2}\n``` {.python .cell-code}\nSAh = pd.read_csv(\"../donnees/SAh.csv\", header=0, sep=\",\")\n```\n:::\n\n\n::: {#563789cb .cell execution_count=3}\n``` {.python .cell-code}\nnomsvar = list(SAh.columns.difference([\"chd\"]))\nformule = \"~ 1 +\" + \"+\".join(nomsvar)\ndsX = dmatrix(formule, data=SAh)\nX = dmatrix(formule, data=SAh, return_type=\"dataframe\").\\\n    iloc[:,1:].to_numpy()\nY = SAh[\"chd\"].to_numpy()\n```\n:::\n\n\n::: {#53dbce27 .cell execution_count=4}\n``` {.python .cell-code}\nscalerX = StandardScaler().fit(X)\nXcr= scalerX.transform(X)\nl0 = np.abs(Xcr.transpose().dot((Y  - Y.mean()))).max()/X.shape[0]\nllc = np.linspace(0,-4,100)\nll = l0*10**llc\nCs_lasso = 1/ 0.9/ X.shape[0] / (l0*10**(llc))\nCs_ridge = 1/ 0.9/ X.shape[0] / ((l0*10**(llc)) * 100)\nCs_enet =  1/ 0.9/ X.shape[0] / ((l0*10**(llc)) / 0.5)\n```\n:::\n\n\n::: {#0e54c36d .cell execution_count=5}\n``` {.python .cell-code}\ncoefs_lasso = []\ncoefs_enet = []\ncoefs_ridge = []\n```\n:::\n\n\n::: {#6e783b4f .cell execution_count=6}\n``` {.python .cell-code}\nXcr = StandardScaler().fit(X).transform(X)\nfor a, b, c in zip(Cs_lasso, Cs_ridge, Cs_enet) :\n    ## lasso\n    lasso = LogisticRegression(penalty=\"l1\", C=a, solver=\"liblinear\", warm_start=True).fit(Xcr, Y)\n    coefs_lasso.append(lasso.coef_[0])\n    ## ridge\n    ridge = LogisticRegression(penalty=\"l2\", C=b, warm_start=True).fit(Xcr, Y)\n    coefs_ridge.append(ridge.coef_[0])\n    ## enet\n    enet = LogisticRegression(penalty=\"elasticnet\", C=c, solver=\"saga\", l1_ratio=0.5, warm_start=True).fit(Xcr, Y)\n    coefs_enet.append(enet.coef_[0])\n```\n:::\n\n\n::: {#ae78e908 .cell execution_count=7}\n``` {.python .cell-code}\nfig, (ax1, ax2, ax3) = plt.subplots(1, 3)\nax1.plot(np.log(Cs_lasso), coefs_lasso)\nax2.plot(np.log(Cs_enet), coefs_enet)\nax3.plot(np.log(Cs_ridge), coefs_ridge)\nfig.tight_layout()\n```\n\n::: {.cell-output .cell-output-display}\n![](chap14_files/figure-html/cell-8-output-1.png){width=662 height=469}\n:::\n:::\n\n\n#   Choix du paramètre de régularisation $\\lambda$\n\n::: {#30c1036b .cell execution_count=8}\n``` {.python .cell-code}\nskf = StratifiedKFold(n_splits=10, shuffle=True, random_state=0)\n```\n:::\n\n\n::: {#42cb23b3 .cell execution_count=9}\n``` {.python .cell-code}\ncr = StandardScaler()\nlassocvM1 =  LogisticRegressionCV(cv=skf, penalty=\"l1\", n_jobs=3, solver=\"liblinear\", Cs=Cs_lasso, scoring=\"neg_log_loss\")\nridgecvM1 = LogisticRegressionCV(cv=skf, penalty=\"l2\", n_jobs=3, Cs=Cs_ridge, scoring=\"neg_log_loss\")\nenetcvM1 = LogisticRegressionCV(cv=skf, penalty=\"elasticnet\", n_jobs=3, Cs= Cs_enet, solver=\"saga\", l1_ratios=[0.5], scoring=\"neg_log_loss\")\n```\n:::\n\n\n::: {#50f6a80c .cell execution_count=10}\n``` {.python .cell-code}\npipe_lassocvM1 = Pipeline(steps=[(\"cr\", cr), (\"lassocv\", lassocvM1)])\npipe_ridgecvM1 = Pipeline(steps=[(\"cr\", cr), (\"ridgecv\", ridgecvM1)])\npipe_enetcvM1 = Pipeline(steps=[(\"cr\", cr), (\"enetcv\", enetcvM1)])\n```\n:::\n\n\n::: {#e506d0d7 .cell execution_count=11}\n``` {.python .cell-code}\npipe_lassocvM1.fit(X,Y)\npipe_ridgecvM1.fit(X,Y)\npipe_enetcvM1.fit(X,Y)\n```\n\n::: {.cell-output .cell-output-display execution_count=11}\n```{=html}\n<style>#sk-container-id-1 {\n  /* Definition of color scheme common for light and dark mode */\n  --sklearn-color-text: #000;\n  --sklearn-color-text-muted: #666;\n  --sklearn-color-line: gray;\n  /* Definition of color scheme for unfitted estimators */\n  --sklearn-color-unfitted-level-0: #fff5e6;\n  --sklearn-color-unfitted-level-1: #f6e4d2;\n  --sklearn-color-unfitted-level-2: #ffe0b3;\n  --sklearn-color-unfitted-level-3: chocolate;\n  /* Definition of color scheme for fitted estimators */\n  --sklearn-color-fitted-level-0: #f0f8ff;\n  --sklearn-color-fitted-level-1: #d4ebff;\n  --sklearn-color-fitted-level-2: #b3dbfd;\n  --sklearn-color-fitted-level-3: cornflowerblue;\n\n  /* Specific color for light theme */\n  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n  --sklearn-color-icon: #696969;\n\n  @media (prefers-color-scheme: dark) {\n    /* Redefinition of color scheme for dark theme */\n    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n    --sklearn-color-icon: #878787;\n  }\n}\n\n#sk-container-id-1 {\n  color: var(--sklearn-color-text);\n}\n\n#sk-container-id-1 pre {\n  padding: 0;\n}\n\n#sk-container-id-1 input.sk-hidden--visually {\n  border: 0;\n  clip: rect(1px 1px 1px 1px);\n  clip: rect(1px, 1px, 1px, 1px);\n  height: 1px;\n  margin: -1px;\n  overflow: hidden;\n  padding: 0;\n  position: absolute;\n  width: 1px;\n}\n\n#sk-container-id-1 div.sk-dashed-wrapped {\n  border: 1px dashed var(--sklearn-color-line);\n  margin: 0 0.4em 0.5em 0.4em;\n  box-sizing: border-box;\n  padding-bottom: 0.4em;\n  background-color: var(--sklearn-color-background);\n}\n\n#sk-container-id-1 div.sk-container {\n  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n     but bootstrap.min.css set `[hidden] { display: none !important; }`\n     so we also need the `!important` here to be able to override the\n     default hidden behavior on the sphinx rendered scikit-learn.org.\n     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n  display: inline-block !important;\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-text-repr-fallback {\n  display: none;\n}\n\ndiv.sk-parallel-item,\ndiv.sk-serial,\ndiv.sk-item {\n  /* draw centered vertical line to link estimators */\n  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n  background-size: 2px 100%;\n  background-repeat: no-repeat;\n  background-position: center center;\n}\n\n/* Parallel-specific style estimator block */\n\n#sk-container-id-1 div.sk-parallel-item::after {\n  content: \"\";\n  width: 100%;\n  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n  flex-grow: 1;\n}\n\n#sk-container-id-1 div.sk-parallel {\n  display: flex;\n  align-items: stretch;\n  justify-content: center;\n  background-color: var(--sklearn-color-background);\n  position: relative;\n}\n\n#sk-container-id-1 div.sk-parallel-item {\n  display: flex;\n  flex-direction: column;\n}\n\n#sk-container-id-1 div.sk-parallel-item:first-child::after {\n  align-self: flex-end;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:last-child::after {\n  align-self: flex-start;\n  width: 50%;\n}\n\n#sk-container-id-1 div.sk-parallel-item:only-child::after {\n  width: 0;\n}\n\n/* Serial-specific style estimator block */\n\n#sk-container-id-1 div.sk-serial {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  background-color: var(--sklearn-color-background);\n  padding-right: 1em;\n  padding-left: 1em;\n}\n\n\n/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\nclickable and can be expanded/collapsed.\n- Pipeline and ColumnTransformer use this feature and define the default style\n- Estimators will overwrite some part of the style using the `sk-estimator` class\n*/\n\n/* Pipeline and ColumnTransformer style (default) */\n\n#sk-container-id-1 div.sk-toggleable {\n  /* Default theme specific background. It is overwritten whether we have a\n  specific estimator or a Pipeline/ColumnTransformer */\n  background-color: var(--sklearn-color-background);\n}\n\n/* Toggleable label */\n#sk-container-id-1 label.sk-toggleable__label {\n  cursor: pointer;\n  display: flex;\n  width: 100%;\n  margin-bottom: 0;\n  padding: 0.5em;\n  box-sizing: border-box;\n  text-align: center;\n  align-items: start;\n  justify-content: space-between;\n  gap: 0.5em;\n}\n\n#sk-container-id-1 label.sk-toggleable__label .caption {\n  font-size: 0.6rem;\n  font-weight: lighter;\n  color: var(--sklearn-color-text-muted);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n  /* Arrow on the left of the label */\n  content: \"▸\";\n  float: left;\n  margin-right: 0.25em;\n  color: var(--sklearn-color-icon);\n}\n\n#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n  color: var(--sklearn-color-text);\n}\n\n/* Toggleable content - dropdown */\n\n#sk-container-id-1 div.sk-toggleable__content {\n  max-height: 0;\n  max-width: 0;\n  overflow: hidden;\n  text-align: left;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content pre {\n  margin: 0.2em;\n  border-radius: 0.25em;\n  color: var(--sklearn-color-text);\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n  /* unfitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n  /* Expand drop-down */\n  max-height: 200px;\n  max-width: 100%;\n  overflow: auto;\n}\n\n#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n  content: \"▾\";\n}\n\n/* Pipeline/ColumnTransformer-specific style */\n\n#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator-specific style */\n\n/* Colorize estimator box */\n#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n#sk-container-id-1 div.sk-label label {\n  /* The background is the default theme color */\n  color: var(--sklearn-color-text-on-default-background);\n}\n\n/* On hover, darken the color of the background */\n#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n/* Label box, darken color on hover, fitted */\n#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n  color: var(--sklearn-color-text);\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Estimator label */\n\n#sk-container-id-1 div.sk-label label {\n  font-family: monospace;\n  font-weight: bold;\n  display: inline-block;\n  line-height: 1.2em;\n}\n\n#sk-container-id-1 div.sk-label-container {\n  text-align: center;\n}\n\n/* Estimator-specific */\n#sk-container-id-1 div.sk-estimator {\n  font-family: monospace;\n  border: 1px dotted var(--sklearn-color-border-box);\n  border-radius: 0.25em;\n  box-sizing: border-box;\n  margin-bottom: 0.5em;\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-0);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-0);\n}\n\n/* on hover */\n#sk-container-id-1 div.sk-estimator:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-2);\n}\n\n#sk-container-id-1 div.sk-estimator.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-2);\n}\n\n/* Specification for estimator info (e.g. \"i\" and \"?\") */\n\n/* Common style for \"i\" and \"?\" */\n\n.sk-estimator-doc-link,\na:link.sk-estimator-doc-link,\na:visited.sk-estimator-doc-link {\n  float: right;\n  font-size: smaller;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1em;\n  height: 1em;\n  width: 1em;\n  text-decoration: none !important;\n  margin-left: 0.5em;\n  text-align: center;\n  /* unfitted */\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n  color: var(--sklearn-color-unfitted-level-1);\n}\n\n.sk-estimator-doc-link.fitted,\na:link.sk-estimator-doc-link.fitted,\na:visited.sk-estimator-doc-link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\ndiv.sk-estimator:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link:hover,\n.sk-estimator-doc-link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\ndiv.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover,\ndiv.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n.sk-estimator-doc-link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n/* Span, style for the box shown on hovering the info icon */\n.sk-estimator-doc-link span {\n  display: none;\n  z-index: 9999;\n  position: relative;\n  font-weight: normal;\n  right: .2ex;\n  padding: .5ex;\n  margin: .5ex;\n  width: min-content;\n  min-width: 20ex;\n  max-width: 50ex;\n  color: var(--sklearn-color-text);\n  box-shadow: 2pt 2pt 4pt #999;\n  /* unfitted */\n  background: var(--sklearn-color-unfitted-level-0);\n  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n}\n\n.sk-estimator-doc-link.fitted span {\n  /* fitted */\n  background: var(--sklearn-color-fitted-level-0);\n  border: var(--sklearn-color-fitted-level-3);\n}\n\n.sk-estimator-doc-link:hover span {\n  display: block;\n}\n\n/* \"?\"-specific style due to the `<a>` HTML tag */\n\n#sk-container-id-1 a.estimator_doc_link {\n  float: right;\n  font-size: 1rem;\n  line-height: 1em;\n  font-family: monospace;\n  background-color: var(--sklearn-color-background);\n  border-radius: 1rem;\n  height: 1rem;\n  width: 1rem;\n  text-decoration: none;\n  /* unfitted */\n  color: var(--sklearn-color-unfitted-level-1);\n  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted {\n  /* fitted */\n  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n  color: var(--sklearn-color-fitted-level-1);\n}\n\n/* On hover */\n#sk-container-id-1 a.estimator_doc_link:hover {\n  /* unfitted */\n  background-color: var(--sklearn-color-unfitted-level-3);\n  color: var(--sklearn-color-background);\n  text-decoration: none;\n}\n\n#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n  /* fitted */\n  background-color: var(--sklearn-color-fitted-level-3);\n}\n</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>Pipeline(steps=[(&#x27;cr&#x27;, StandardScaler()),\n                (&#x27;enetcv&#x27;,\n                 LogisticRegressionCV(Cs=array([6.77620047e-03, 7.43687165e-03, 8.16195745e-03, 8.95773823e-03,\n       9.83110664e-03, 1.07896274e-02, 1.18416028e-02, 1.29961444e-02,\n       1.42632524e-02, 1.56539020e-02, 1.71801381e-02, 1.88551803e-02,\n       2.06935371e-02, 2.27111314e-02, 2.49254387e-02, 2.73556382e-02,\n       3.00227792e-02, 3.29499631e-02...\n       1.67851660e+01, 1.84216989e+01, 2.02177918e+01, 2.21890016e+01,\n       2.43524018e+01, 2.67267309e+01, 2.93325542e+01, 3.21924420e+01,\n       3.53311654e+01, 3.87759104e+01, 4.25565138e+01, 4.67057214e+01,\n       5.12594715e+01, 5.62572067e+01, 6.17422149e+01, 6.77620047e+01]),\n                                      cv=StratifiedKFold(n_splits=10, random_state=0, shuffle=True),\n                                      l1_ratios=[0.5], n_jobs=3,\n                                      penalty=&#x27;elasticnet&#x27;,\n                                      scoring=&#x27;neg_log_loss&#x27;, solver=&#x27;saga&#x27;))])</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" ><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>Pipeline</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.pipeline.Pipeline.html\">?<span>Documentation for Pipeline</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></div></label><div class=\"sk-toggleable__content fitted\"><pre>Pipeline(steps=[(&#x27;cr&#x27;, StandardScaler()),\n                (&#x27;enetcv&#x27;,\n                 LogisticRegressionCV(Cs=array([6.77620047e-03, 7.43687165e-03, 8.16195745e-03, 8.95773823e-03,\n       9.83110664e-03, 1.07896274e-02, 1.18416028e-02, 1.29961444e-02,\n       1.42632524e-02, 1.56539020e-02, 1.71801381e-02, 1.88551803e-02,\n       2.06935371e-02, 2.27111314e-02, 2.49254387e-02, 2.73556382e-02,\n       3.00227792e-02, 3.29499631e-02...\n       1.67851660e+01, 1.84216989e+01, 2.02177918e+01, 2.21890016e+01,\n       2.43524018e+01, 2.67267309e+01, 2.93325542e+01, 3.21924420e+01,\n       3.53311654e+01, 3.87759104e+01, 4.25565138e+01, 4.67057214e+01,\n       5.12594715e+01, 5.62572067e+01, 6.17422149e+01, 6.77620047e+01]),\n                                      cv=StratifiedKFold(n_splits=10, random_state=0, shuffle=True),\n                                      l1_ratios=[0.5], n_jobs=3,\n                                      penalty=&#x27;elasticnet&#x27;,\n                                      scoring=&#x27;neg_log_loss&#x27;, solver=&#x27;saga&#x27;))])</pre></div> </div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" ><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>StandardScaler</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.preprocessing.StandardScaler.html\">?<span>Documentation for StandardScaler</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>StandardScaler()</pre></div> </div></div><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" ><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow\"><div><div>LogisticRegressionCV</div></div><div><a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.6/modules/generated/sklearn.linear_model.LogisticRegressionCV.html\">?<span>Documentation for LogisticRegressionCV</span></a></div></label><div class=\"sk-toggleable__content fitted\"><pre>LogisticRegressionCV(Cs=array([6.77620047e-03, 7.43687165e-03, 8.16195745e-03, 8.95773823e-03,\n       9.83110664e-03, 1.07896274e-02, 1.18416028e-02, 1.29961444e-02,\n       1.42632524e-02, 1.56539020e-02, 1.71801381e-02, 1.88551803e-02,\n       2.06935371e-02, 2.27111314e-02, 2.49254387e-02, 2.73556382e-02,\n       3.00227792e-02, 3.29499631e-02, 3.61625438e-02, 3.96883472e-02,\n       4.35579121e-02, 4.78...\n       1.67851660e+01, 1.84216989e+01, 2.02177918e+01, 2.21890016e+01,\n       2.43524018e+01, 2.67267309e+01, 2.93325542e+01, 3.21924420e+01,\n       3.53311654e+01, 3.87759104e+01, 4.25565138e+01, 4.67057214e+01,\n       5.12594715e+01, 5.62572067e+01, 6.17422149e+01, 6.77620047e+01]),\n                     cv=StratifiedKFold(n_splits=10, random_state=0, shuffle=True),\n                     l1_ratios=[0.5], n_jobs=3, penalty=&#x27;elasticnet&#x27;,\n                     scoring=&#x27;neg_log_loss&#x27;, solver=&#x27;saga&#x27;)</pre></div> </div></div></div></div></div></div>\n```\n:::\n:::\n\n\n::: {#6a4d7409 .cell execution_count=12}\n``` {.python .cell-code}\ncr = StandardScaler()\nlassocvM2 =  LogisticRegressionCV(cv=skf, penalty=\"l1\", n_jobs=3, solver=\"liblinear\", Cs=Cs_lasso, scoring=\"accuracy\")\nridgecvM2 = LogisticRegressionCV(cv=skf, penalty=\"l2\", n_jobs=3, Cs=Cs_ridge, scoring=\"accuracy\")\nenetcvM2 = LogisticRegressionCV(cv=skf, penalty=\"elasticnet\", n_jobs=3, Cs= Cs_enet, solver=\"saga\", l1_ratios=[0.5], scoring=\"accuracy\")\npipe_lassocvM2 = Pipeline(steps=[(\"cr\", cr), (\"lassocv\", lassocvM2)])\npipe_ridgecvM2 = Pipeline(steps=[(\"cr\", cr), (\"ridgecv\", ridgecvM2)])\npipe_enetcvM2 = Pipeline(steps=[(\"cr\", cr), (\"enetcv\", enetcvM2)])\npipe_lassocvM2.fit(X,Y)\npipe_ridgecvM2.fit(X,Y)\npipe_enetcvM2.fit(X,Y)\n\n\ncr = StandardScaler()\nlassocvM3 =  LogisticRegressionCV(cv=skf, penalty=\"l1\", n_jobs=3, solver=\"liblinear\", Cs=Cs_lasso, scoring=\"roc_auc\")\nridgecvM3 = LogisticRegressionCV(cv=skf, penalty=\"l2\", n_jobs=3, Cs=Cs_ridge, scoring=\"roc_auc\")\nenetcvM3 = LogisticRegressionCV(cv=skf, penalty=\"elasticnet\", n_jobs=3, Cs= Cs_enet, solver=\"saga\", l1_ratios=[0.5], scoring=\"roc_auc\")\npipe_lassocvM3 = Pipeline(steps=[(\"cr\", cr), (\"lassocv\", lassocvM3)])\npipe_ridgecvM3 = Pipeline(steps=[(\"cr\", cr), (\"ridgecv\", ridgecvM3)])\npipe_enetcvM3 = Pipeline(steps=[(\"cr\", cr), (\"enetcv\", enetcvM3)])\npipe_lassocvM3.fit(X,Y)\npipe_ridgecvM3.fit(X,Y)\npipe_enetcvM3.fit(X,Y)\netape_lassoM3 = pipe_lassocvM3.named_steps[\"lassocv\"]\netape_lassoM3.Cs_\netape_lassoM3.scores_[1]\netape_lassoM3.scores_[1].mean(axis=0)\netape_lassoM3.scores_[1].std(axis=0)/np.sqrt(10)\n\netape_lassoM1 = pipe_lassocvM1.named_steps[\"lassocv\"]\netape_lassoM2 = pipe_lassocvM2.named_steps[\"lassocv\"]\netape_lassoM3 = pipe_lassocvM3.named_steps[\"lassocv\"]\netape_ridgeM1 = pipe_ridgecvM1.named_steps[\"ridgecv\"]\netape_ridgeM2 = pipe_ridgecvM2.named_steps[\"ridgecv\"]\netape_ridgeM3 = pipe_ridgecvM3.named_steps[\"ridgecv\"]\netape_enetM1 = pipe_enetcvM1.named_steps[\"enetcv\"]\netape_enetM2 = pipe_enetcvM2.named_steps[\"enetcv\"]\netape_enetM3 = pipe_enetcvM3.named_steps[\"enetcv\"]\n```\n:::\n\n\n::: {#a762be6a .cell execution_count=13}\n``` {.python .cell-code}\nfig, axs = plt.subplots(3, 3)\naxs[0,0].errorbar(np.log(Cs_lasso), etape_lassoM1.scores_[1].mean(axis=0), etape_lassoM1.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[0,0].text(.99, .1, \"Lasso - Vraisemblance\", ha=\"right\", va=\"top\",transform=axs[0,0].transAxes)\naxs[0,1].errorbar(np.log(Cs_ridge), etape_ridgeM1.scores_[1].mean(axis=0), etape_ridgeM1.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[0,1].text(.99, .1, \"Ridge - Vraisemblance\", ha=\"right\", va=\"top\",transform=axs[0,1].transAxes)\naxs[0,2].errorbar(np.log(Cs_enet), etape_enetM1.scores_[1][:,:,0].mean(axis=0), etape_enetM1.scores_[1][:,:,0].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[0,2].text(.99, .1, \"ElasticNet - Vraisemblance\", ha=\"right\", va=\"top\",transform=axs[0,2].transAxes)\n##\naxs[1,0].errorbar(np.log(Cs_lasso), etape_lassoM2.scores_[1].mean(axis=0), etape_lassoM2.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[1,0].text(.99, .1, \"Lasso - Bien classés\", ha=\"right\", va=\"top\",transform=axs[1,0].transAxes)\naxs[1,1].errorbar(np.log(Cs_ridge), etape_ridgeM2.scores_[1].mean(axis=0), etape_ridgeM2.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[1,1].text(.99, .1, \"Ridge - Bien classés\", ha=\"right\", va=\"top\",transform=axs[1,1].transAxes)\naxs[1,2].errorbar(np.log(Cs_enet), etape_enetM2.scores_[1][:,:,0].mean(axis=0), etape_enetM2.scores_[1][:,:,0].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[1,2].text(.99, .1, \"ElasticNet - Bien classés\", ha=\"right\", va=\"top\",transform=axs[1,2].transAxes)\n##\naxs[2,0].errorbar(np.log(Cs_lasso), etape_lassoM3.scores_[1].mean(axis=0), etape_lassoM3.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[2,0].text(.99, .1, \"Lasso - AUC\", ha=\"right\", va=\"top\",transform=axs[2,0].transAxes)\naxs[2,1].errorbar(np.log(Cs_ridge), etape_ridgeM3.scores_[1].mean(axis=0), etape_ridgeM3.scores_[1].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[2,1].text(.99, .1, \"Ridge - AUC\", ha=\"right\", va=\"top\",transform=axs[2,1].transAxes)\naxs[2,2].errorbar(np.log(Cs_enet), etape_enetM3.scores_[1][:,:,0].mean(axis=0), etape_enetM3.scores_[1][:,:,0].std(axis=0)/np.sqrt(10), fmt=\"-o\", mec=\"black\", mfc=\"black\", ms=0.2, color=\"#80808077\")\naxs[2,2].text(.99, .1, \"ElasticNet - AUC\", ha=\"right\", va=\"top\",transform=axs[2,2].transAxes)\n```\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nText(0.99, 0.1, 'ElasticNet - AUC')\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](chap14_files/figure-html/cell-14-output-2.png){width=582 height=415}\n:::\n:::\n\n\n::: {#3a2d3390 .cell execution_count=14}\n``` {.python .cell-code}\npipe_lassocvM3.predict_proba(X[[14,49],:])\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\narray([[0.46132249, 0.53867751],\n       [0.85489843, 0.14510157]])\n```\n:::\n:::\n\n\n#   Group lasso\n\n::: {#23007815 .cell execution_count=15}\n``` {.python .cell-code}\nX1 = np.concatenate((np.repeat(\"A\", 60), np.repeat(\"B\", 90), np.repeat(\"C\", 50)))\nX2 = np.concatenate((np.repeat(\"E\", 40), np.repeat(\"F\", 60), np.repeat(\"G\", 55), np.repeat(\"H\",45)))\nrng = np.random.default_rng(1298)\nX3 = rng.uniform(low=0.0, high=1.0, size=200)\nrng = np.random.default_rng(2381)\nY = rng.uniform(low=0.0, high=1.0, size=200).round(0)\nY1 = np.sign(2*Y-1)\ndonnees = pd.DataFrame({\"X1\": X1, \"X2\": X2, \"X3\": X3, \"Y\": Y, \"Y1\": Y1})\n```\n:::\n\n\n\n\n\n\n",
    "supporting": [
      "chap14_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}